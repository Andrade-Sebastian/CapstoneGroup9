// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: emotiBits.proto
// Protobuf C++ Version: 5.28.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_emotiBits_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_emotiBits_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_emotiBits_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_emotiBits_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_emotiBits_2eproto;
namespace emotiBits {
class Device;
struct DeviceDefaultTypeInternal;
extern DeviceDefaultTypeInternal _Device_default_instance_;
class DeviceList;
struct DeviceListDefaultTypeInternal;
extern DeviceListDefaultTypeInternal _DeviceList_default_instance_;
class DeviceRequest;
struct DeviceRequestDefaultTypeInternal;
extern DeviceRequestDefaultTypeInternal _DeviceRequest_default_instance_;
}  // namespace emotiBits
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace emotiBits {

// ===================================================================


// -------------------------------------------------------------------

class DeviceRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:emotiBits.DeviceRequest) */ {
 public:
  inline DeviceRequest() : DeviceRequest(nullptr) {}
  ~DeviceRequest() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline DeviceRequest(const DeviceRequest& from) : DeviceRequest(nullptr, from) {}
  inline DeviceRequest(DeviceRequest&& from) noexcept
      : DeviceRequest(nullptr, std::move(from)) {}
  inline DeviceRequest& operator=(const DeviceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceRequest& operator=(DeviceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceRequest* internal_default_instance() {
    return reinterpret_cast<const DeviceRequest*>(
        &_DeviceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(DeviceRequest& a, DeviceRequest& b) { a.Swap(&b); }
  inline void Swap(DeviceRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceRequest* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<DeviceRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DeviceRequest& from) { DeviceRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "emotiBits.DeviceRequest"; }

 protected:
  explicit DeviceRequest(::google::protobuf::Arena* arena);
  DeviceRequest(::google::protobuf::Arena* arena, const DeviceRequest& from);
  DeviceRequest(::google::protobuf::Arena* arena, DeviceRequest&& from) noexcept
      : DeviceRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSessionNameFieldNumber = 1,
  };
  // string sessionName = 1;
  void clear_sessionname() ;
  const std::string& sessionname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sessionname(Arg_&& arg, Args_... args);
  std::string* mutable_sessionname();
  PROTOBUF_NODISCARD std::string* release_sessionname();
  void set_allocated_sessionname(std::string* value);

  private:
  const std::string& _internal_sessionname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sessionname(
      const std::string& value);
  std::string* _internal_mutable_sessionname();

  public:
  // @@protoc_insertion_point(class_scope:emotiBits.DeviceRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      43, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_DeviceRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DeviceRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr sessionname_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_emotiBits_2eproto;
};
// -------------------------------------------------------------------

class Device final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:emotiBits.Device) */ {
 public:
  inline Device() : Device(nullptr) {}
  ~Device() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Device(
      ::google::protobuf::internal::ConstantInitialized);

  inline Device(const Device& from) : Device(nullptr, from) {}
  inline Device(Device&& from) noexcept
      : Device(nullptr, std::move(from)) {}
  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }
  inline Device& operator=(Device&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Device& default_instance() {
    return *internal_default_instance();
  }
  static inline const Device* internal_default_instance() {
    return reinterpret_cast<const Device*>(
        &_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Device& a, Device& b) { a.Swap(&b); }
  inline void Swap(Device* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Device* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Device* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<Device>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Device& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Device& from) { Device::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Device* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "emotiBits.Device"; }

 protected:
  explicit Device(::google::protobuf::Arena* arena);
  Device(::google::protobuf::Arena* arena, const Device& from);
  Device(::google::protobuf::Arena* arena, Device&& from) noexcept
      : Device(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSerialFieldNumber = 1,
    kIpFieldNumber = 2,
  };
  // string serial = 1;
  void clear_serial() ;
  const std::string& serial() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_serial(Arg_&& arg, Args_... args);
  std::string* mutable_serial();
  PROTOBUF_NODISCARD std::string* release_serial();
  void set_allocated_serial(std::string* value);

  private:
  const std::string& _internal_serial() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serial(
      const std::string& value);
  std::string* _internal_mutable_serial();

  public:
  // string ip = 2;
  void clear_ip() ;
  const std::string& ip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip(Arg_&& arg, Args_... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* value);

  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(
      const std::string& value);
  std::string* _internal_mutable_ip();

  public:
  // @@protoc_insertion_point(class_scope:emotiBits.Device)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      33, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Device_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Device& from_msg);
    ::google::protobuf::internal::ArenaStringPtr serial_;
    ::google::protobuf::internal::ArenaStringPtr ip_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_emotiBits_2eproto;
};
// -------------------------------------------------------------------

class DeviceList final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:emotiBits.DeviceList) */ {
 public:
  inline DeviceList() : DeviceList(nullptr) {}
  ~DeviceList() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceList(
      ::google::protobuf::internal::ConstantInitialized);

  inline DeviceList(const DeviceList& from) : DeviceList(nullptr, from) {}
  inline DeviceList(DeviceList&& from) noexcept
      : DeviceList(nullptr, std::move(from)) {}
  inline DeviceList& operator=(const DeviceList& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceList& operator=(DeviceList&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceList& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceList* internal_default_instance() {
    return reinterpret_cast<const DeviceList*>(
        &_DeviceList_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(DeviceList& a, DeviceList& b) { a.Swap(&b); }
  inline void Swap(DeviceList* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceList* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<DeviceList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DeviceList& from) { DeviceList::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceList* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "emotiBits.DeviceList"; }

 protected:
  explicit DeviceList(::google::protobuf::Arena* arena);
  DeviceList(::google::protobuf::Arena* arena, const DeviceList& from);
  DeviceList(::google::protobuf::Arena* arena, DeviceList&& from) noexcept
      : DeviceList(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAllDevicesFieldNumber = 1,
  };
  // repeated .emotiBits.Device allDevices = 1;
  int alldevices_size() const;
  private:
  int _internal_alldevices_size() const;

  public:
  void clear_alldevices() ;
  ::emotiBits::Device* mutable_alldevices(int index);
  ::google::protobuf::RepeatedPtrField<::emotiBits::Device>* mutable_alldevices();

  private:
  const ::google::protobuf::RepeatedPtrField<::emotiBits::Device>& _internal_alldevices() const;
  ::google::protobuf::RepeatedPtrField<::emotiBits::Device>* _internal_mutable_alldevices();
  public:
  const ::emotiBits::Device& alldevices(int index) const;
  ::emotiBits::Device* add_alldevices();
  const ::google::protobuf::RepeatedPtrField<::emotiBits::Device>& alldevices() const;
  // @@protoc_insertion_point(class_scope:emotiBits.DeviceList)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_DeviceList_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DeviceList& from_msg);
    ::google::protobuf::RepeatedPtrField< ::emotiBits::Device > alldevices_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_emotiBits_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Device

// string serial = 1;
inline void Device::clear_serial() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.serial_.ClearToEmpty();
}
inline const std::string& Device::serial() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:emotiBits.Device.serial)
  return _internal_serial();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Device::set_serial(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.serial_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:emotiBits.Device.serial)
}
inline std::string* Device::mutable_serial() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_serial();
  // @@protoc_insertion_point(field_mutable:emotiBits.Device.serial)
  return _s;
}
inline const std::string& Device::_internal_serial() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.serial_.Get();
}
inline void Device::_internal_set_serial(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.serial_.Set(value, GetArena());
}
inline std::string* Device::_internal_mutable_serial() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.serial_.Mutable( GetArena());
}
inline std::string* Device::release_serial() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:emotiBits.Device.serial)
  return _impl_.serial_.Release();
}
inline void Device::set_allocated_serial(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.serial_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.serial_.IsDefault()) {
          _impl_.serial_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:emotiBits.Device.serial)
}

// string ip = 2;
inline void Device::clear_ip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& Device::ip() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:emotiBits.Device.ip)
  return _internal_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Device::set_ip(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:emotiBits.Device.ip)
}
inline std::string* Device::mutable_ip() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:emotiBits.Device.ip)
  return _s;
}
inline const std::string& Device::_internal_ip() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ip_.Get();
}
inline void Device::_internal_set_ip(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_.Set(value, GetArena());
}
inline std::string* Device::_internal_mutable_ip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.ip_.Mutable( GetArena());
}
inline std::string* Device::release_ip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:emotiBits.Device.ip)
  return _impl_.ip_.Release();
}
inline void Device::set_allocated_ip(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ip_.IsDefault()) {
          _impl_.ip_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:emotiBits.Device.ip)
}

// -------------------------------------------------------------------

// DeviceRequest

// string sessionName = 1;
inline void DeviceRequest::clear_sessionname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sessionname_.ClearToEmpty();
}
inline const std::string& DeviceRequest::sessionname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:emotiBits.DeviceRequest.sessionName)
  return _internal_sessionname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceRequest::set_sessionname(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sessionname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:emotiBits.DeviceRequest.sessionName)
}
inline std::string* DeviceRequest::mutable_sessionname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sessionname();
  // @@protoc_insertion_point(field_mutable:emotiBits.DeviceRequest.sessionName)
  return _s;
}
inline const std::string& DeviceRequest::_internal_sessionname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sessionname_.Get();
}
inline void DeviceRequest::_internal_set_sessionname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sessionname_.Set(value, GetArena());
}
inline std::string* DeviceRequest::_internal_mutable_sessionname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.sessionname_.Mutable( GetArena());
}
inline std::string* DeviceRequest::release_sessionname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:emotiBits.DeviceRequest.sessionName)
  return _impl_.sessionname_.Release();
}
inline void DeviceRequest::set_allocated_sessionname(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sessionname_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sessionname_.IsDefault()) {
          _impl_.sessionname_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:emotiBits.DeviceRequest.sessionName)
}

// -------------------------------------------------------------------

// DeviceList

// repeated .emotiBits.Device allDevices = 1;
inline int DeviceList::_internal_alldevices_size() const {
  return _internal_alldevices().size();
}
inline int DeviceList::alldevices_size() const {
  return _internal_alldevices_size();
}
inline void DeviceList::clear_alldevices() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alldevices_.Clear();
}
inline ::emotiBits::Device* DeviceList::mutable_alldevices(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:emotiBits.DeviceList.allDevices)
  return _internal_mutable_alldevices()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::emotiBits::Device>* DeviceList::mutable_alldevices()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:emotiBits.DeviceList.allDevices)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_alldevices();
}
inline const ::emotiBits::Device& DeviceList::alldevices(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:emotiBits.DeviceList.allDevices)
  return _internal_alldevices().Get(index);
}
inline ::emotiBits::Device* DeviceList::add_alldevices() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::emotiBits::Device* _add = _internal_mutable_alldevices()->Add();
  // @@protoc_insertion_point(field_add:emotiBits.DeviceList.allDevices)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::emotiBits::Device>& DeviceList::alldevices() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:emotiBits.DeviceList.allDevices)
  return _internal_alldevices();
}
inline const ::google::protobuf::RepeatedPtrField<::emotiBits::Device>&
DeviceList::_internal_alldevices() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.alldevices_;
}
inline ::google::protobuf::RepeatedPtrField<::emotiBits::Device>*
DeviceList::_internal_mutable_alldevices() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.alldevices_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace emotiBits


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_emotiBits_2eproto_2epb_2eh
