// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: emotiBits.proto

#include "emotiBits.pb.h"
#include "emotiBits.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace emotiBits {

static const char* findDevices_method_names[] = {
  "/emotiBits.findDevices/getDevices",
  "/emotiBits.findDevices/foundDevices",
};

std::unique_ptr< findDevices::Stub> findDevices::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< findDevices::Stub> stub(new findDevices::Stub(channel, options));
  return stub;
}

findDevices::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_getDevices_(findDevices_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_foundDevices_(findDevices_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::emotiBits::Device, ::emotiBits::DeviceList>* findDevices::Stub::getDevicesRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::emotiBits::Device, ::emotiBits::DeviceList>::Create(channel_.get(), rpcmethod_getDevices_, context);
}

void findDevices::Stub::async::getDevices(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::emotiBits::Device,::emotiBits::DeviceList>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::emotiBits::Device,::emotiBits::DeviceList>::Create(stub_->channel_.get(), stub_->rpcmethod_getDevices_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::emotiBits::Device, ::emotiBits::DeviceList>* findDevices::Stub::AsyncgetDevicesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::emotiBits::Device, ::emotiBits::DeviceList>::Create(channel_.get(), cq, rpcmethod_getDevices_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::emotiBits::Device, ::emotiBits::DeviceList>* findDevices::Stub::PrepareAsyncgetDevicesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::emotiBits::Device, ::emotiBits::DeviceList>::Create(channel_.get(), cq, rpcmethod_getDevices_, context, false, nullptr);
}

::grpc::ClientReader< ::emotiBits::Device>* findDevices::Stub::foundDevicesRaw(::grpc::ClientContext* context, const ::emotiBits::DeviceRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::emotiBits::Device>::Create(channel_.get(), rpcmethod_foundDevices_, context, request);
}

void findDevices::Stub::async::foundDevices(::grpc::ClientContext* context, const ::emotiBits::DeviceRequest* request, ::grpc::ClientReadReactor< ::emotiBits::Device>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::emotiBits::Device>::Create(stub_->channel_.get(), stub_->rpcmethod_foundDevices_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::emotiBits::Device>* findDevices::Stub::AsyncfoundDevicesRaw(::grpc::ClientContext* context, const ::emotiBits::DeviceRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::emotiBits::Device>::Create(channel_.get(), cq, rpcmethod_foundDevices_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::emotiBits::Device>* findDevices::Stub::PrepareAsyncfoundDevicesRaw(::grpc::ClientContext* context, const ::emotiBits::DeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::emotiBits::Device>::Create(channel_.get(), cq, rpcmethod_foundDevices_, context, request, false, nullptr);
}

findDevices::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      findDevices_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< findDevices::Service, ::emotiBits::Device, ::emotiBits::DeviceList>(
          [](findDevices::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::emotiBits::DeviceList,
             ::emotiBits::Device>* stream) {
               return service->getDevices(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      findDevices_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< findDevices::Service, ::emotiBits::DeviceRequest, ::emotiBits::Device>(
          [](findDevices::Service* service,
             ::grpc::ServerContext* ctx,
             const ::emotiBits::DeviceRequest* req,
             ::grpc::ServerWriter<::emotiBits::Device>* writer) {
               return service->foundDevices(ctx, req, writer);
             }, this)));
}

findDevices::Service::~Service() {
}

::grpc::Status findDevices::Service::getDevices(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::emotiBits::DeviceList, ::emotiBits::Device>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status findDevices::Service::foundDevices(::grpc::ServerContext* context, const ::emotiBits::DeviceRequest* request, ::grpc::ServerWriter< ::emotiBits::Device>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace emotiBits

