// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: emotiBits.proto
#ifndef GRPC_emotiBits_2eproto__INCLUDED
#define GRPC_emotiBits_2eproto__INCLUDED

#include "emotiBits.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace emotiBits {

class findDevices final {
 public:
  static constexpr char const* service_full_name() {
    return "emotiBits.findDevices";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::emotiBits::DeviceResponse>> getDevices(::grpc::ClientContext* context, const ::emotiBits::DeviceList& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::emotiBits::DeviceResponse>>(getDevicesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::emotiBits::DeviceResponse>> AsyncgetDevices(::grpc::ClientContext* context, const ::emotiBits::DeviceList& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::emotiBits::DeviceResponse>>(AsyncgetDevicesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::emotiBits::DeviceResponse>> PrepareAsyncgetDevices(::grpc::ClientContext* context, const ::emotiBits::DeviceList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::emotiBits::DeviceResponse>>(PrepareAsyncgetDevicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::emotiBits::Device>> foundDevices(::grpc::ClientContext* context, const ::emotiBits::DeviceRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::emotiBits::Device>>(foundDevicesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::emotiBits::Device>> AsyncfoundDevices(::grpc::ClientContext* context, const ::emotiBits::DeviceRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::emotiBits::Device>>(AsyncfoundDevicesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::emotiBits::Device>> PrepareAsyncfoundDevices(::grpc::ClientContext* context, const ::emotiBits::DeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::emotiBits::Device>>(PrepareAsyncfoundDevicesRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void getDevices(::grpc::ClientContext* context, const ::emotiBits::DeviceList* request, ::grpc::ClientReadReactor< ::emotiBits::DeviceResponse>* reactor) = 0;
      virtual void foundDevices(::grpc::ClientContext* context, const ::emotiBits::DeviceRequest* request, ::grpc::ClientReadReactor< ::emotiBits::Device>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::emotiBits::DeviceResponse>* getDevicesRaw(::grpc::ClientContext* context, const ::emotiBits::DeviceList& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::emotiBits::DeviceResponse>* AsyncgetDevicesRaw(::grpc::ClientContext* context, const ::emotiBits::DeviceList& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::emotiBits::DeviceResponse>* PrepareAsyncgetDevicesRaw(::grpc::ClientContext* context, const ::emotiBits::DeviceList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::emotiBits::Device>* foundDevicesRaw(::grpc::ClientContext* context, const ::emotiBits::DeviceRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::emotiBits::Device>* AsyncfoundDevicesRaw(::grpc::ClientContext* context, const ::emotiBits::DeviceRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::emotiBits::Device>* PrepareAsyncfoundDevicesRaw(::grpc::ClientContext* context, const ::emotiBits::DeviceRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::emotiBits::DeviceResponse>> getDevices(::grpc::ClientContext* context, const ::emotiBits::DeviceList& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::emotiBits::DeviceResponse>>(getDevicesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::emotiBits::DeviceResponse>> AsyncgetDevices(::grpc::ClientContext* context, const ::emotiBits::DeviceList& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::emotiBits::DeviceResponse>>(AsyncgetDevicesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::emotiBits::DeviceResponse>> PrepareAsyncgetDevices(::grpc::ClientContext* context, const ::emotiBits::DeviceList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::emotiBits::DeviceResponse>>(PrepareAsyncgetDevicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::emotiBits::Device>> foundDevices(::grpc::ClientContext* context, const ::emotiBits::DeviceRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::emotiBits::Device>>(foundDevicesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::emotiBits::Device>> AsyncfoundDevices(::grpc::ClientContext* context, const ::emotiBits::DeviceRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::emotiBits::Device>>(AsyncfoundDevicesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::emotiBits::Device>> PrepareAsyncfoundDevices(::grpc::ClientContext* context, const ::emotiBits::DeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::emotiBits::Device>>(PrepareAsyncfoundDevicesRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void getDevices(::grpc::ClientContext* context, const ::emotiBits::DeviceList* request, ::grpc::ClientReadReactor< ::emotiBits::DeviceResponse>* reactor) override;
      void foundDevices(::grpc::ClientContext* context, const ::emotiBits::DeviceRequest* request, ::grpc::ClientReadReactor< ::emotiBits::Device>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::emotiBits::DeviceResponse>* getDevicesRaw(::grpc::ClientContext* context, const ::emotiBits::DeviceList& request) override;
    ::grpc::ClientAsyncReader< ::emotiBits::DeviceResponse>* AsyncgetDevicesRaw(::grpc::ClientContext* context, const ::emotiBits::DeviceList& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::emotiBits::DeviceResponse>* PrepareAsyncgetDevicesRaw(::grpc::ClientContext* context, const ::emotiBits::DeviceList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::emotiBits::Device>* foundDevicesRaw(::grpc::ClientContext* context, const ::emotiBits::DeviceRequest& request) override;
    ::grpc::ClientAsyncReader< ::emotiBits::Device>* AsyncfoundDevicesRaw(::grpc::ClientContext* context, const ::emotiBits::DeviceRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::emotiBits::Device>* PrepareAsyncfoundDevicesRaw(::grpc::ClientContext* context, const ::emotiBits::DeviceRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_getDevices_;
    const ::grpc::internal::RpcMethod rpcmethod_foundDevices_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status getDevices(::grpc::ServerContext* context, const ::emotiBits::DeviceList* request, ::grpc::ServerWriter< ::emotiBits::DeviceResponse>* writer);
    virtual ::grpc::Status foundDevices(::grpc::ServerContext* context, const ::emotiBits::DeviceRequest* request, ::grpc::ServerWriter< ::emotiBits::Device>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_getDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getDevices() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_getDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDevices(::grpc::ServerContext* /*context*/, const ::emotiBits::DeviceList* /*request*/, ::grpc::ServerWriter< ::emotiBits::DeviceResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDevices(::grpc::ServerContext* context, ::emotiBits::DeviceList* request, ::grpc::ServerAsyncWriter< ::emotiBits::DeviceResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_foundDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_foundDevices() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_foundDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status foundDevices(::grpc::ServerContext* /*context*/, const ::emotiBits::DeviceRequest* /*request*/, ::grpc::ServerWriter< ::emotiBits::Device>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestfoundDevices(::grpc::ServerContext* context, ::emotiBits::DeviceRequest* request, ::grpc::ServerAsyncWriter< ::emotiBits::Device>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_getDevices<WithAsyncMethod_foundDevices<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_getDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getDevices() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::emotiBits::DeviceList, ::emotiBits::DeviceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::emotiBits::DeviceList* request) { return this->getDevices(context, request); }));
    }
    ~WithCallbackMethod_getDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDevices(::grpc::ServerContext* /*context*/, const ::emotiBits::DeviceList* /*request*/, ::grpc::ServerWriter< ::emotiBits::DeviceResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::emotiBits::DeviceResponse>* getDevices(
      ::grpc::CallbackServerContext* /*context*/, const ::emotiBits::DeviceList* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_foundDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_foundDevices() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::emotiBits::DeviceRequest, ::emotiBits::Device>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::emotiBits::DeviceRequest* request) { return this->foundDevices(context, request); }));
    }
    ~WithCallbackMethod_foundDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status foundDevices(::grpc::ServerContext* /*context*/, const ::emotiBits::DeviceRequest* /*request*/, ::grpc::ServerWriter< ::emotiBits::Device>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::emotiBits::Device>* foundDevices(
      ::grpc::CallbackServerContext* /*context*/, const ::emotiBits::DeviceRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_getDevices<WithCallbackMethod_foundDevices<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_getDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getDevices() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_getDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDevices(::grpc::ServerContext* /*context*/, const ::emotiBits::DeviceList* /*request*/, ::grpc::ServerWriter< ::emotiBits::DeviceResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_foundDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_foundDevices() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_foundDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status foundDevices(::grpc::ServerContext* /*context*/, const ::emotiBits::DeviceRequest* /*request*/, ::grpc::ServerWriter< ::emotiBits::Device>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_getDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getDevices() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_getDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDevices(::grpc::ServerContext* /*context*/, const ::emotiBits::DeviceList* /*request*/, ::grpc::ServerWriter< ::emotiBits::DeviceResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDevices(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_foundDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_foundDevices() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_foundDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status foundDevices(::grpc::ServerContext* /*context*/, const ::emotiBits::DeviceRequest* /*request*/, ::grpc::ServerWriter< ::emotiBits::Device>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestfoundDevices(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getDevices() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->getDevices(context, request); }));
    }
    ~WithRawCallbackMethod_getDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDevices(::grpc::ServerContext* /*context*/, const ::emotiBits::DeviceList* /*request*/, ::grpc::ServerWriter< ::emotiBits::DeviceResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* getDevices(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_foundDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_foundDevices() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->foundDevices(context, request); }));
    }
    ~WithRawCallbackMethod_foundDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status foundDevices(::grpc::ServerContext* /*context*/, const ::emotiBits::DeviceRequest* /*request*/, ::grpc::ServerWriter< ::emotiBits::Device>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* foundDevices(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_getDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_getDevices() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::emotiBits::DeviceList, ::emotiBits::DeviceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::emotiBits::DeviceList, ::emotiBits::DeviceResponse>* streamer) {
                       return this->StreamedgetDevices(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_getDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getDevices(::grpc::ServerContext* /*context*/, const ::emotiBits::DeviceList* /*request*/, ::grpc::ServerWriter< ::emotiBits::DeviceResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedgetDevices(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::emotiBits::DeviceList,::emotiBits::DeviceResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_foundDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_foundDevices() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::emotiBits::DeviceRequest, ::emotiBits::Device>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::emotiBits::DeviceRequest, ::emotiBits::Device>* streamer) {
                       return this->StreamedfoundDevices(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_foundDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status foundDevices(::grpc::ServerContext* /*context*/, const ::emotiBits::DeviceRequest* /*request*/, ::grpc::ServerWriter< ::emotiBits::Device>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedfoundDevices(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::emotiBits::DeviceRequest,::emotiBits::Device>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_getDevices<WithSplitStreamingMethod_foundDevices<Service > > SplitStreamedService;
  typedef WithSplitStreamingMethod_getDevices<WithSplitStreamingMethod_foundDevices<Service > > StreamedService;
};

}  // namespace emotiBits


#endif  // GRPC_emotiBits_2eproto__INCLUDED
