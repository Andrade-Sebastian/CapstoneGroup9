import { BoardIds, BrainFlowPresets, IBrainFlowInputParams, LogLevels } from './brainflow.types';
export declare class BrainFlowInputParams {
    private inputParams;
    constructor(inputParams: Partial<IBrainFlowInputParams>);
    toJson(): string;
}
export declare class BoardShim {
    private boardId;
    private masterBoardId;
    private inputJson;
    constructor(boardId: BoardIds, inputParams: Partial<IBrainFlowInputParams>);
    static getVersion(): string;
    static setLogLevel(logLevel: LogLevels): void;
    static setLogFile(file: string): void;
    static logMessage(logLevel: LogLevels, message: string): void;
    prepareSession(): void;
    isPrepared(): boolean;
    addStreamer(streamerParams: string, preset?: BrainFlowPresets): void;
    deleteStreamer(streamerParams: string, preset?: BrainFlowPresets): void;
    insertMarker(value: number, preset?: BrainFlowPresets): void;
    startStream(numSamples?: number, streamerParams?: null): void;
    configBoard(config: string): string;
    configBoardWithBytes(config: string, len: number): void;
    getBoardDataCount(preset?: BrainFlowPresets): number;
    getBoardData(numSamples?: number, preset?: BrainFlowPresets): number[][];
    getCurrentBoardData(numSamples: number, preset?: BrainFlowPresets): number[][];
    stopStream(): void;
    releaseSession(): void;
    static releaseAllSessions(): void;
    static getNumRows(boardId: BoardIds, preset?: BrainFlowPresets): number;
    static getPackageNumChannel(boardId: BoardIds, preset?: BrainFlowPresets): number;
    static getTimestampChannel(boardId: BoardIds, preset?: BrainFlowPresets): number;
    static getMarkerChannel(boardId: BoardIds, preset?: BrainFlowPresets): number;
    static getBatteryChannel(boardId: BoardIds, preset?: BrainFlowPresets): number;
    static getSamplingRate(boardId: BoardIds, preset?: BrainFlowPresets): number;
    static getEegChannels(boardId: BoardIds, preset?: BrainFlowPresets): number[];
    static getExgChannels(boardId: BoardIds, preset?: BrainFlowPresets): number[];
    static getEmgChannels(boardId: BoardIds, preset?: BrainFlowPresets): number[];
    static getEcgChannels(boardId: BoardIds, preset?: BrainFlowPresets): number[];
    static getEogChannels(boardId: BoardIds, preset?: BrainFlowPresets): number[];
    static getPpgChannels(boardId: BoardIds, preset?: BrainFlowPresets): number[];
    static getEdaChannels(boardId: BoardIds, preset?: BrainFlowPresets): number[];
    static getAccelChannels(boardId: BoardIds, preset?: BrainFlowPresets): number[];
    static getRotationChannels(boardId: BoardIds, preset?: BrainFlowPresets): number[];
    static getAnalogChannels(boardId: BoardIds, preset?: BrainFlowPresets): number[];
    static getGyroChannels(boardId: BoardIds, preset?: BrainFlowPresets): number[];
    static getOtherChannels(boardId: BoardIds, preset?: BrainFlowPresets): number[];
    static getTemperatureChannels(boardId: BoardIds, preset?: BrainFlowPresets): number[];
    static getResistanceChannels(boardId: BoardIds, preset?: BrainFlowPresets): number[];
    static getMagnetometerChannels(boardId: BoardIds, preset?: BrainFlowPresets): number[];
    static getBoardPresets(boardId: BoardIds): number[];
    static getDeviceName(boardId: BoardIds, preset?: BrainFlowPresets): string;
    static getEegNames(boardId: BoardIds, preset?: BrainFlowPresets): string[];
    static getBoardDescr(boardId: BoardIds, preset?: BrainFlowPresets): Object;
}
