import { AggOperations, DetrendOperations, FilterTypes, LogLevels, NoiseEstimationLevelTypes, NoiseTypes, ThresholdTypes, WaveletDenoisingTypes, WaveletExtensionTypes, WaveletTypes, WindowOperations } from './brainflow.types';
import { complex } from './complex';
export declare class DataFilter {
    static setLogLevel(logLevel: LogLevels): void;
    static setLogFile(file: string): void;
    static logMessage(logLevel: LogLevels, message: string): void;
    static getVersion(): string;
    static getRailedPercentage(data: number[], gain: number): number;
    static performLowPass(data: number[], samplingRate: number, cutoff: number, order: number, filterType: FilterTypes, ripple: number): void;
    static performHighPass(data: number[], samplingRate: number, cutoff: number, order: number, filterType: FilterTypes, ripple: number): void;
    static performBandPass(data: number[], samplingRate: number, startFreq: number, stopFreq: number, order: number, filterType: FilterTypes, ripple: number): void;
    static performBandStop(data: number[], samplingRate: number, startFreq: number, stopFreq: number, order: number, filterType: FilterTypes, ripple: number): void;
    static removeEnvironmentalNoise(data: number[], samplingRate: number, noiseType: NoiseTypes): void;
    static writeFile(data: number[][], file: string, mode: string): void;
    static readFile(file: string): number[][];
    private static getNumElementsInFile;
    static performDownsampling(data: number[], period: number, aggOperation: AggOperations): number[];
    static performWaveletDenoising(data: number[], wavelet: WaveletTypes, decompositionLevel: number, waveletDenoising?: WaveletDenoisingTypes, threshold?: ThresholdTypes, extensionType?: WaveletExtensionTypes, noiseLevel?: NoiseEstimationLevelTypes): void;
    static getOxygenLevel(ppgIr: number[], ppgRed: number[], samplingRate: number, coef1?: number, coef2?: number, coef3?: number): number;
    static getHeartRate(ppgIr: number[], ppgRed: number[], samplingRate: number, fftSize: number): number;
    static getCustomBandPowers(data: number[][], bands: number[][], channels: number[], samplingRate: number, applyFilters?: boolean): [number[], number[]];
    static getAvgBandPowers(data: number[][], channels: number[], samplingRate: number, applyFilters?: boolean): [number[], number[]];
    static getNearestPowerOfTwo(value: number): number;
    static getWindow(windowFunction: WindowOperations, len: number): number[];
    static performFft(data: number[], windowType: WindowOperations): complex[];
    static performIfft(data: complex[]): number[];
    static getPsd(data: number[], samplingRate: number, windowType: WindowOperations): [number[], number[]];
    static getPsdWelch(data: number[], nfft: number, overlap: number, samplingRate: number, windowType: WindowOperations): [number[], number[]];
    static getBandPower(psd: [number[], number[]], startFreq: number, stopFreq: number): number;
    static performWaveletTransform(data: number[], wavelet: WaveletTypes, decompositionLevel: number, extension: WaveletExtensionTypes): [number[], number[]];
    static performInverseWaveletTransform(waveletData: [number[], number[]], originalLen: number, wavelet: WaveletTypes, decompositionLevel: number, extension: WaveletExtensionTypes): number[];
    static restoreDataFromWaveletDetailedCoeffs(data: number[], wavelet: WaveletTypes, decompositionLevel: number, levelToRestore: number): number[];
    static detectPeaksZScore(data: number[], lag?: number, threshold?: number, influence?: number): number[];
    static performIca(data: number[][], numComponents: number, channels: number[]): [number[][], number[][], number[][], number[][]];
    static detrend(data: number[], detrendOperation: DetrendOperations): void;
    static calcStddev(data: number[], startPos: number, stopPos: number): number;
}
