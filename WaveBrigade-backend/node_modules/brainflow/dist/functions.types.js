"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MLModuleFunctions = exports.MLModuleCLikeFunctions = exports.DataHandlerFunctions = exports.DataHandlerCLikeFunctions = exports.BoardControllerFunctions = exports.BoardControllerCLikeFunctions = void 0;
var BoardControllerCLikeFunctions;
(function (BoardControllerCLikeFunctions) {
    BoardControllerCLikeFunctions["set_log_level_board_controller"] = "int set_log_level_board_controller (int log_level)";
    BoardControllerCLikeFunctions["set_log_file_board_controller"] = "int set_log_file_board_controller (const char *log_file)";
    BoardControllerCLikeFunctions["log_message_board_controller"] = "int log_message_board_controller (int log_level, char *log_message)";
    BoardControllerCLikeFunctions["get_version_board_controller"] = "int get_version_board_controller (_Inout_ char *version, _Inout_ int *len, int max)";
    BoardControllerCLikeFunctions["start_stream"] = "int start_stream (int buffer_size, const char *streamer_params, int board_id, const char *json_brainflow_input_params)";
    BoardControllerCLikeFunctions["stop_stream"] = "int stop_stream (int board_id, const char *json_brainflow_input_params)";
    BoardControllerCLikeFunctions["prepare_session"] = "int prepare_session (int board_id, const char *json_brainflow_input_params)";
    BoardControllerCLikeFunctions["release_all_sessions"] = "int release_all_sessions ()";
    BoardControllerCLikeFunctions["release_session"] = "int release_session (int board_id, const char *json_brainflow_input_params)";
    BoardControllerCLikeFunctions["add_streamer"] = "int add_streamer (const char *streamer, int preset, int board_id, const char *json_brainflow_input_params)";
    BoardControllerCLikeFunctions["config_board"] = "int config_board (const char *config, _Inout_ char *response, _Inout_ int *resp_len, int board_id, const char *json_brainflow_input_params)";
    BoardControllerCLikeFunctions["config_board_with_bytes"] = "int config_board_with_bytes (const char *bytes, int len, int board_id, const char *json_brainflow_input_params)";
    BoardControllerCLikeFunctions["delete_streamer"] = "int delete_streamer (const char *streamer, int preset, int board_id, const char *json_brainflow_input_params)";
    BoardControllerCLikeFunctions["insert_marker"] = "int insert_marker (double value, int preset, int board_id, const char *json_brainflow_input_params)";
    BoardControllerCLikeFunctions["is_prepared"] = "int is_prepared (_Inout_ int *prepared, int board_id, const char *json_brainflow_input_params)";
    BoardControllerCLikeFunctions["get_board_data_count"] = "int get_board_data_count (int preset, _Inout_ int *result, int board_id, const char *json_brainflow_input_params)";
    BoardControllerCLikeFunctions["get_board_data"] = "int get_board_data (int data_count, int preset, _Inout_ double *data_buf, int board_id, const char *json_brainflow_input_params)";
    BoardControllerCLikeFunctions["get_current_board_data"] = "int get_current_board_data (int num_samples, int preset, _Inout_ double *data_buf, _Inout_ int *returned_samples, int board_id, const char *json_brainflow_input_params)";
    BoardControllerCLikeFunctions["get_num_rows"] = "int get_num_rows (int board_id, int preset, _Inout_ int *num_rows)";
    BoardControllerCLikeFunctions["get_sampling_rate"] = "int get_sampling_rate (int board_id, int preset, _Inout_ int *sampling_rate)";
    BoardControllerCLikeFunctions["get_battery_channel"] = "int get_battery_channel (int board_id, int preset, _Inout_ int *value)";
    BoardControllerCLikeFunctions["get_package_num_channel"] = "int get_package_num_channel (int board_id, int preset, _Inout_ int *value)";
    BoardControllerCLikeFunctions["get_timestamp_channel"] = "int get_timestamp_channel (int board_id, int preset, _Inout_ int *value)";
    BoardControllerCLikeFunctions["get_marker_channel"] = "int get_marker_channel (int board_id, int preset, _Inout_ int *value)";
    BoardControllerCLikeFunctions["get_eeg_channels"] = "int get_eeg_channels (int board_id, int preset, _Inout_ int *eeg_channels, _Inout_ int *len)";
    BoardControllerCLikeFunctions["get_exg_channels"] = "int get_exg_channels (int board_id, int preset, _Inout_ int *channels, _Inout_ int *len)";
    BoardControllerCLikeFunctions["get_emg_channels"] = "int get_emg_channels (int board_id, int preset, _Inout_ int *channels, _Inout_ int *len)";
    BoardControllerCLikeFunctions["get_ecg_channels"] = "int get_ecg_channels (int board_id, int preset, _Inout_ int *channels, _Inout_ int *len)";
    BoardControllerCLikeFunctions["get_eog_channels"] = "int get_eog_channels (int board_id, int preset, _Inout_ int *channels, _Inout_ int *len)";
    BoardControllerCLikeFunctions["get_ppg_channels"] = "int get_ppg_channels (int board_id, int preset, _Inout_ int *channels, _Inout_ int *len)";
    BoardControllerCLikeFunctions["get_eda_channels"] = "int get_eda_channels (int board_id, int preset, _Inout_ int *channels, _Inout_ int *len)";
    BoardControllerCLikeFunctions["get_accel_channels"] = "int get_accel_channels (int board_id, int preset, _Inout_ int *channels, _Inout_ int *len)";
    BoardControllerCLikeFunctions["get_analog_channels"] = "int get_analog_channels (int board_id, int preset, _Inout_ int *channels, _Inout_ int *len)";
    BoardControllerCLikeFunctions["get_gyro_channels"] = "int get_gyro_channels (int board_id, int preset, _Inout_ int *channels, _Inout_ int *len)";
    BoardControllerCLikeFunctions["get_other_channels"] = "int get_other_channels (int board_id, int preset, _Inout_ int *channels, _Inout_ int *len)";
    BoardControllerCLikeFunctions["get_temperature_channels"] = "int get_temperature_channels (int board_id, int preset, _Inout_ int *channels, _Inout_ int *len)";
    BoardControllerCLikeFunctions["get_resistance_channels"] = "int get_resistance_channels (int board_id, int preset, _Inout_ int *channels, _Inout_ int *len)";
    BoardControllerCLikeFunctions["get_magnetometer_channels"] = "int get_magnetometer_channels (int board_id, int preset, _Inout_ int *channels, _Inout_ int *len)";
    BoardControllerCLikeFunctions["get_rotation_channels"] = "int get_rotation_channels (int board_id, int preset, _Inout_ int *channels, _Inout_ int *len)";
    BoardControllerCLikeFunctions["get_eeg_names"] = "int get_eeg_names (int board_id, int preset, _Inout_ char *eeg_names, _Inout_ int *len)";
    BoardControllerCLikeFunctions["get_device_name"] = "int get_device_name (int board_id, int preset, _Inout_ char *device_name, _Inout_ int *len)";
    BoardControllerCLikeFunctions["get_board_descr"] = "int get_board_descr (int board_id, int preset, _Inout_ char *descr, _Inout_ int *len)";
    BoardControllerCLikeFunctions["get_board_presets"] = "int get_board_presets (int board_id, _Inout_ int *presets, _Inout_ int *len)";
})(BoardControllerCLikeFunctions || (exports.BoardControllerCLikeFunctions = BoardControllerCLikeFunctions = {}));
class BoardControllerFunctions {
}
exports.BoardControllerFunctions = BoardControllerFunctions;
var DataHandlerCLikeFunctions;
(function (DataHandlerCLikeFunctions) {
    DataHandlerCLikeFunctions["perform_lowpass"] = "int perform_lowpass (_Inout_ double *data, int data_len, int sampling_rate, double cutoff, int order, int filter_type, double ripple)";
    DataHandlerCLikeFunctions["perform_highpass"] = "int perform_highpass (_Inout_ double *data, int data_len, int sampling_rate, double cutoff, int order, int filter_type, double ripple)";
    DataHandlerCLikeFunctions["perform_bandpass"] = "int perform_bandpass (_Inout_ double *data, int data_len, int sampling_rate, double start_freq, double stop_freq, int order, int filter_type, double ripple)";
    DataHandlerCLikeFunctions["perform_bandstop"] = "int perform_bandstop (_Inout_ double *data, int data_len, int sampling_rate, double start_freq, double stop_freq, int order, int filter_type, double ripple)";
    DataHandlerCLikeFunctions["remove_environmental_noise"] = "int remove_environmental_noise (_Inout_ double *data, int data_len, int sampling_rate, int noise_type)";
    DataHandlerCLikeFunctions["write_file"] = "int write_file (const double *data, int num_rows, int num_cols, const char *file_name, const char *file_mode)";
    DataHandlerCLikeFunctions["read_file"] = "int read_file (_Inout_ double *data, _Inout_ int *num_rows, _Inout_ int *num_cols, const char *file_name, int num_elements)";
    DataHandlerCLikeFunctions["get_num_elements_in_file"] = "int get_num_elements_in_file (const char *file_name, _Inout_ int *num_elements)";
    DataHandlerCLikeFunctions["perform_downsampling"] = "int perform_downsampling (double *data, int data_len, int period, int agg_operation, _Inout_ double *output_data)";
    DataHandlerCLikeFunctions["perform_wavelet_transform"] = "int perform_wavelet_transform (double *data, int data_len, int wavelet, int decomposition_level, int extension, _Inout_ double *output_data, _Inout_ int *decomposition_lengths)";
    DataHandlerCLikeFunctions["perform_inverse_wavelet_transform"] = "int perform_inverse_wavelet_transform (double *wavelet_coeffs, int original_data_len, int wavelet, int decomposition_level, int extension, int *decomposition_lengths, _Inout_ double *output_data)";
    DataHandlerCLikeFunctions["perform_wavelet_denoising"] = "int perform_wavelet_denoising (_Inout_ double *data, int data_len, int wavelet, int decomposition_level, int wavelet_denoising, int threshold, int extenstion_type, int noise_level)";
    DataHandlerCLikeFunctions["get_window"] = "int get_window (int window_function, int window_len, _Inout_ double *output_window)";
    DataHandlerCLikeFunctions["perform_fft"] = "int perform_fft (double *data, int data_len, int window_function, _Inout_ double *output_re, _Inout_ double *output_im)";
    DataHandlerCLikeFunctions["perform_ifft"] = "int perform_ifft (double *input_re, double *input_im, int data_len, _Inout_ double *restored_data)";
    DataHandlerCLikeFunctions["get_nearest_power_of_two"] = "int get_nearest_power_of_two (int value, _Inout_ int *output)";
    DataHandlerCLikeFunctions["get_psd"] = "int get_psd (double *data, int data_len, int sampling_rate, int window_function, _Inout_ double *output_ampl, _Inout_ double *output_freq)";
    DataHandlerCLikeFunctions["detrend"] = "int detrend (_Inout_ double *data, int data_len, int detrend_operation)";
    DataHandlerCLikeFunctions["calc_stddev"] = "int calc_stddev (double *data, int start_pos, int end_pos, _Inout_ double *output)";
    DataHandlerCLikeFunctions["get_psd_welch"] = "int get_psd_welch (double *data, int data_len, int nfft, int overlap, int sampling_rate, int window_function, _Inout_ double *output_ampl, _Inout_ double *output_freq)";
    DataHandlerCLikeFunctions["get_band_power"] = "int get_band_power (double *ampl, double *freq, int data_len, double freq_start, double freq_end, _Inout_ double *band_power)";
    DataHandlerCLikeFunctions["get_custom_band_powers"] = "int get_custom_band_powers (double *raw_data, int rows, int cols, double *start_freqs, double *stop_freqs, int num_bands, int sampling_rate, int apply_filters, _Inout_ double *avg_band_powers, _Inout_ double *stddev_band_powers)";
    DataHandlerCLikeFunctions["get_oxygen_level"] = "int get_oxygen_level (double *ppg_ir, double *ppg_red, int data_size, int sampling_rate, double callib_coef1, double callib_coef2, double callib_coef3, _Inout_ double *oxygen_level)";
    DataHandlerCLikeFunctions["get_heart_rate"] = "int get_heart_rate (double *ppg_ir, double *ppg_red, int data_size, int sampling_rate, int fft_size, _Inout_ double *rate)";
    DataHandlerCLikeFunctions["restore_data_from_wavelet_detailed_coeffs"] = "int restore_data_from_wavelet_detailed_coeffs (double *data, int data_len, int wavelet, int decomposition_level, int level_to_restore, _Inout_ double *output)";
    DataHandlerCLikeFunctions["detect_peaks_z_score"] = "int detect_peaks_z_score (double *data, int data_len, int lag, double threshold, double influence, _Inout_ double *output)";
    DataHandlerCLikeFunctions["perform_ica"] = "int perform_ica (double *data, int rows, int cols, int num_components, _Inout_ double *w_mat, _Inout_ double *k_mat, _Inout_ double *a_mat, _Inout_ double *s_mat)";
    DataHandlerCLikeFunctions["get_csp"] = "int get_csp (const double *data, const double *labels, int n_epochs, int n_channels, int n_times, _Inout_ double *output_w, _Inout_ double *output_d)";
    DataHandlerCLikeFunctions["get_railed_percentage"] = "int get_railed_percentage (double *raw_data, int data_len, int gain, _Inout_ double *output)";
    DataHandlerCLikeFunctions["set_log_level_data_handler"] = "int set_log_level_data_handler (int log_level)";
    DataHandlerCLikeFunctions["set_log_file_data_handler"] = "int set_log_file_data_handler (const char *log_file)";
    DataHandlerCLikeFunctions["log_message_data_handler"] = "int log_message_data_handler (int log_level, char *message)";
    DataHandlerCLikeFunctions["get_version_data_handler"] = "int get_version_data_handler (_Inout_ char *version, _Inout_ int *num_chars, int max_chars)";
})(DataHandlerCLikeFunctions || (exports.DataHandlerCLikeFunctions = DataHandlerCLikeFunctions = {}));
class DataHandlerFunctions {
}
exports.DataHandlerFunctions = DataHandlerFunctions;
var MLModuleCLikeFunctions;
(function (MLModuleCLikeFunctions) {
    MLModuleCLikeFunctions["set_log_level_ml_module"] = "int set_log_level_ml_module (int log_level)";
    MLModuleCLikeFunctions["set_log_file_ml_module"] = "int set_log_file_ml_module (const char *log_file)";
    MLModuleCLikeFunctions["log_message_ml_module"] = "int log_message_ml_module (int log_level, char *log_message)";
    MLModuleCLikeFunctions["get_version_ml_module"] = "int get_version_ml_module (_Inout_ char *version, _Inout_ int *len, int max)";
    MLModuleCLikeFunctions["prepare"] = "int prepare (const char *json_params)";
    MLModuleCLikeFunctions["predict"] = "int predict (double *data, int data_len, _Inout_ double *output, _Inout_ int *output_len, const char *json_params)";
    MLModuleCLikeFunctions["release"] = "int release (const char *json_params)";
    MLModuleCLikeFunctions["release_all"] = "int release_all ()";
})(MLModuleCLikeFunctions || (exports.MLModuleCLikeFunctions = MLModuleCLikeFunctions = {}));
class MLModuleFunctions {
}
exports.MLModuleFunctions = MLModuleFunctions;
//# sourceMappingURL=functions.types.js.map