"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BoardShim = exports.BrainFlowInputParams = void 0;
const koffi_1 = __importDefault(require("koffi"));
const lodash_1 = __importDefault(require("lodash"));
const os = __importStar(require("os"));
const brainflow_types_1 = require("./brainflow.types");
const functions_types_1 = require("./functions.types");
class BrainFlowInputParams {
    constructor(inputParams) {
        this.inputParams = {
            serialPort: '',
            macAddress: '',
            ipAddress: '',
            ipAddressAux: '',
            ipAddressAnc: '',
            ipPort: 0,
            ipPortAux: 0,
            ipPortAnc: 0,
            ipProtocol: brainflow_types_1.IpProtocolTypes.NO_IP_PROTOCOL,
            otherInfo: '',
            timeout: 0,
            serialNumber: '',
            file: '',
            fileAux: '',
            fileAnc: '',
            masterBoard: brainflow_types_1.BoardIds.NO_BOARD,
        };
        this.inputParams = { ...this.inputParams, ...inputParams };
    }
    toJson() {
        const params = {};
        Object.keys(this.inputParams).forEach((key) => {
            params[lodash_1.default.snakeCase(key)] = this.inputParams[key];
        });
        return JSON.stringify(params);
    }
}
exports.BrainFlowInputParams = BrainFlowInputParams;
class BoardControllerDLL extends functions_types_1.BoardControllerFunctions {
    constructor() {
        super();
        this.libPath = `${__dirname}/../brainflow/lib`;
        this.dllPath = this.getDLLPath();
        this.lib = this.getLib();
        this.isPrepared = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.is_prepared);
        this.prepareSession = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.prepare_session);
        this.startStream = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.start_stream);
        this.configBoard = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.config_board);
        this.configBoardWithBytes = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.config_board_with_bytes);
        this.getBoardDataCount = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.get_board_data_count);
        this.getBoardData = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.get_board_data);
        this.getCurrentBoardData = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.get_current_board_data);
        this.getNumRows = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.get_num_rows);
        this.releaseAllSessions = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.release_all_sessions);
        this.releaseSession = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.release_session);
        this.stopStream = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.stop_stream);
        this.getSamplingRate = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.get_sampling_rate);
        this.getPackageNumChannel = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.get_package_num_channel);
        this.getTimestampChannel = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.get_timestamp_channel);
        this.getMarkerChannel = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.get_marker_channel);
        this.getBatteryChannel = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.get_battery_channel);
        this.getEegChannels = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.get_eeg_channels);
        this.getExgChannels = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.get_exg_channels);
        this.getEmgChannels = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.get_emg_channels);
        this.getEogChannels = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.get_eog_channels);
        this.getEcgChannels = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.get_ecg_channels);
        this.getPpgChannels = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.get_ppg_channels);
        this.getEdaChannels = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.get_eda_channels);
        this.getAccelChannels = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.get_accel_channels);
        this.getRotationChannels = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.get_rotation_channels);
        this.getAnalogChannels = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.get_analog_channels);
        this.getGyroChannels = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.get_gyro_channels);
        this.getOtherChannels = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.get_other_channels);
        this.getTemperatureChannels = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.get_temperature_channels);
        this.getResistanceChannels = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.get_resistance_channels);
        this.getMagnetometerChannels = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.get_magnetometer_channels);
        this.addStreamer = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.add_streamer);
        this.deleteStreamer = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.delete_streamer);
        this.insertMarker = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.insert_marker);
        this.setLogLevelBoardController = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.set_log_level_board_controller);
        this.setLogFileBoardController = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.set_log_file_board_controller);
        this.logMessageBoardController = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.log_message_board_controller);
        this.getVersionBoardController = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.get_version_board_controller);
        this.getDeviceName = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.get_device_name);
        this.getBoardPresets = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.get_board_presets);
        this.getEegNames = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.get_eeg_names);
        this.getBoardDescr = this.lib.func(functions_types_1.BoardControllerCLikeFunctions.get_board_descr);
    }
    getDLLPath() {
        const platform = os.platform();
        const arch = os.arch();
        switch (platform) {
            case 'darwin':
                return `${this.libPath}/libBoardController.dylib`;
            case 'win32':
                return arch === 'x64' ? `${this.libPath}/BoardController.dll` :
                    `${this.libPath}/BoardController32.dll`;
            case 'linux':
                return `${this.libPath}/libBoardController.so`;
            default:
                throw new brainflow_types_1.BrainFlowError(brainflow_types_1.BrainFlowExitCodes.GENERAL_ERROR, `OS ${platform} is not supported.`);
        }
    }
    getLib() {
        try {
            const lib = koffi_1.default.load(this.dllPath);
            return lib;
        }
        catch (err) {
            console.error(err);
            throw new brainflow_types_1.BrainFlowError(brainflow_types_1.BrainFlowExitCodes.GENERAL_ERROR, `${'Could not load BoardController DLL - path://'}${this.dllPath}`);
        }
    }
    static getInstance() {
        if (!BoardControllerDLL.instance) {
            BoardControllerDLL.instance = new BoardControllerDLL();
        }
        return BoardControllerDLL.instance;
    }
}
class BoardShim {
    constructor(boardId, inputParams) {
        this.boardId = boardId;
        this.masterBoardId =
            inputParams.masterBoard && inputParams.masterBoard !== brainflow_types_1.BoardIds.NO_BOARD ?
                inputParams.masterBoard :
                boardId;
        this.inputJson = new BrainFlowInputParams(inputParams).toJson();
    }
    static getVersion() {
        const len = [0];
        let out = ['\0'.repeat(512)];
        const res = BoardControllerDLL.getInstance().getVersionBoardController(out, len, 512);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not get version info');
        }
        return out[0].substring(0, len[0]);
    }
    static setLogLevel(logLevel) {
        const res = BoardControllerDLL.getInstance().setLogLevelBoardController(logLevel);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not set log level properly');
        }
    }
    static setLogFile(file) {
        const res = BoardControllerDLL.getInstance().setLogFileBoardController(file);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not redirect to log file');
        }
    }
    static logMessage(logLevel, message) {
        const res = BoardControllerDLL.getInstance().logMessageBoardController(logLevel, message);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not writte message');
        }
    }
    prepareSession() {
        const res = BoardControllerDLL.getInstance().prepareSession(this.boardId, this.inputJson);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not prepare session');
        }
    }
    isPrepared() {
        const prepared = [0];
        const res = BoardControllerDLL.getInstance().isPrepared(prepared, this.boardId, this.inputJson);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not check prepared state');
        }
        return !!prepared[0];
    }
    addStreamer(streamerParams, preset = brainflow_types_1.BrainFlowPresets.DEFAULT_PRESET) {
        const res = BoardControllerDLL.getInstance().addStreamer(streamerParams, preset, this.boardId, this.inputJson);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not add streamer');
        }
    }
    deleteStreamer(streamerParams, preset = brainflow_types_1.BrainFlowPresets.DEFAULT_PRESET) {
        const res = BoardControllerDLL.getInstance().deleteStreamer(streamerParams, preset, this.boardId, this.inputJson);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not delete streamer');
        }
    }
    insertMarker(value, preset = brainflow_types_1.BrainFlowPresets.DEFAULT_PRESET) {
        const res = BoardControllerDLL.getInstance().insertMarker(value, preset, this.boardId, this.inputJson);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not insert marker');
        }
    }
    startStream(numSamples = 1800 * 250, streamerParams = null) {
        const res = BoardControllerDLL.getInstance().startStream(numSamples, streamerParams, this.boardId, this.inputJson);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not start stream');
        }
    }
    configBoard(config) {
        const len = [0];
        let out = ['\0'.repeat(4096)];
        const res = BoardControllerDLL.getInstance().configBoard(config, out, len, this.boardId, this.inputJson);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not config board');
        }
        return out[0].substring(0, len[0]);
    }
    configBoardWithBytes(config, len) {
        const res = BoardControllerDLL.getInstance().configBoardWithBytes(config, len, this.boardId, this.inputJson);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not config board with bytes');
        }
    }
    getBoardDataCount(preset = brainflow_types_1.BrainFlowPresets.DEFAULT_PRESET) {
        const dataSize = [0];
        const res = BoardControllerDLL.getInstance().getBoardDataCount(preset, dataSize, this.boardId, this.inputJson);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not get board data count');
        }
        return dataSize[0];
    }
    getBoardData(numSamples, preset = brainflow_types_1.BrainFlowPresets.DEFAULT_PRESET) {
        let dataSize = this.getBoardDataCount(preset);
        if (numSamples) {
            if (numSamples < 1)
                throw new Error('invalid num_samples');
            dataSize = Math.min(numSamples, dataSize);
        }
        const packageLength = BoardShim.getNumRows(this.masterBoardId, preset);
        const dataArr = [...new Array(packageLength * dataSize).fill(0)];
        const res = BoardControllerDLL.getInstance().getBoardData(dataSize, preset, dataArr, this.boardId, this.inputJson);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not get board data');
        }
        return lodash_1.default.chunk(dataArr, dataSize);
    }
    getCurrentBoardData(numSamples, preset = brainflow_types_1.BrainFlowPresets.DEFAULT_PRESET) {
        const packageLength = BoardShim.getNumRows(this.masterBoardId, preset);
        const dataArr = [...new Array(packageLength * numSamples).fill(0)];
        const currentSize = [0];
        const res = BoardControllerDLL.getInstance().getCurrentBoardData(numSamples, preset, dataArr, currentSize, this.boardId, this.inputJson);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not get current board data');
        }
        return lodash_1.default.chunk(dataArr, currentSize[0]);
    }
    stopStream() {
        const res = BoardControllerDLL.getInstance().stopStream(this.boardId, this.inputJson);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not stop stream');
        }
    }
    releaseSession() {
        const res = BoardControllerDLL.getInstance().releaseSession(this.boardId, this.inputJson);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not release session');
        }
    }
    static releaseAllSessions() {
        const res = BoardControllerDLL.getInstance().releaseAllSessions();
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not release all sessions');
        }
    }
    static getNumRows(boardId, preset = brainflow_types_1.BrainFlowPresets.DEFAULT_PRESET) {
        const numRows = [0];
        const res = BoardControllerDLL.getInstance().getNumRows(boardId, preset, numRows);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not get num rows');
        }
        return numRows[0];
    }
    static getPackageNumChannel(boardId, preset = brainflow_types_1.BrainFlowPresets.DEFAULT_PRESET) {
        const value = [0];
        const res = BoardControllerDLL.getInstance().getPackageNumChannel(boardId, preset, value);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not get such data from this device');
        }
        return value[0];
    }
    static getTimestampChannel(boardId, preset = brainflow_types_1.BrainFlowPresets.DEFAULT_PRESET) {
        const value = [0];
        const res = BoardControllerDLL.getInstance().getTimestampChannel(boardId, preset, value);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not get such data from this device');
        }
        return value[0];
    }
    static getMarkerChannel(boardId, preset = brainflow_types_1.BrainFlowPresets.DEFAULT_PRESET) {
        const value = [0];
        const res = BoardControllerDLL.getInstance().getMarkerChannel(boardId, preset, value);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not get such data from this device');
        }
        return value[0];
    }
    static getBatteryChannel(boardId, preset = brainflow_types_1.BrainFlowPresets.DEFAULT_PRESET) {
        const value = [0];
        const res = BoardControllerDLL.getInstance().getBatteryChannel(boardId, preset, value);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not get such data from this device');
        }
        return value[0];
    }
    static getSamplingRate(boardId, preset = brainflow_types_1.BrainFlowPresets.DEFAULT_PRESET) {
        const samplingRate = [0];
        const res = BoardControllerDLL.getInstance().getSamplingRate(boardId, preset, samplingRate);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not get sampling rate');
        }
        return samplingRate[0];
    }
    static getEegChannels(boardId, preset = brainflow_types_1.BrainFlowPresets.DEFAULT_PRESET) {
        const numChannels = [0];
        const eegChannels = [...new Array(512).fill(0)];
        const res = BoardControllerDLL.getInstance().getEegChannels(boardId, preset, eegChannels, numChannels);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not get board info');
        }
        return eegChannels.slice(0, numChannels[0]);
    }
    static getExgChannels(boardId, preset = brainflow_types_1.BrainFlowPresets.DEFAULT_PRESET) {
        const numChannels = [0];
        const сhannels = [...new Array(512).fill(0)];
        const res = BoardControllerDLL.getInstance().getExgChannels(boardId, preset, сhannels, numChannels);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not get board info');
        }
        return сhannels.slice(0, numChannels[0]);
    }
    static getEmgChannels(boardId, preset = brainflow_types_1.BrainFlowPresets.DEFAULT_PRESET) {
        const numChannels = [0];
        const сhannels = [...new Array(512).fill(0)];
        const res = BoardControllerDLL.getInstance().getEmgChannels(boardId, preset, сhannels, numChannels);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not get board info');
        }
        return сhannels.slice(0, numChannels[0]);
    }
    static getEcgChannels(boardId, preset = brainflow_types_1.BrainFlowPresets.DEFAULT_PRESET) {
        const numChannels = [0];
        const сhannels = [...new Array(512).fill(0)];
        const res = BoardControllerDLL.getInstance().getEcgChannels(boardId, preset, сhannels, numChannels);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not get board info');
        }
        return сhannels.slice(0, numChannels[0]);
    }
    static getEogChannels(boardId, preset = brainflow_types_1.BrainFlowPresets.DEFAULT_PRESET) {
        const numChannels = [0];
        const сhannels = [...new Array(512).fill(0)];
        const res = BoardControllerDLL.getInstance().getEogChannels(boardId, preset, сhannels, numChannels);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not get board info');
        }
        return сhannels.slice(0, numChannels[0]);
    }
    static getPpgChannels(boardId, preset = brainflow_types_1.BrainFlowPresets.DEFAULT_PRESET) {
        const numChannels = [0];
        const сhannels = [...new Array(512).fill(0)];
        const res = BoardControllerDLL.getInstance().getPpgChannels(boardId, preset, сhannels, numChannels);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not get board info');
        }
        return сhannels.slice(0, numChannels[0]);
    }
    static getEdaChannels(boardId, preset = brainflow_types_1.BrainFlowPresets.DEFAULT_PRESET) {
        const numChannels = [0];
        const сhannels = [...new Array(512).fill(0)];
        const res = BoardControllerDLL.getInstance().getEdaChannels(boardId, preset, сhannels, numChannels);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not get board info');
        }
        return сhannels.slice(0, numChannels[0]);
    }
    static getAccelChannels(boardId, preset = brainflow_types_1.BrainFlowPresets.DEFAULT_PRESET) {
        const numChannels = [0];
        const сhannels = [...new Array(512).fill(0)];
        const res = BoardControllerDLL.getInstance().getAccelChannels(boardId, preset, сhannels, numChannels);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not get board info');
        }
        return сhannels.slice(0, numChannels[0]);
    }
    static getRotationChannels(boardId, preset = brainflow_types_1.BrainFlowPresets.DEFAULT_PRESET) {
        const numChannels = [0];
        const сhannels = [...new Array(512).fill(0)];
        const res = BoardControllerDLL.getInstance().getRotationChannels(boardId, preset, сhannels, numChannels);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not get board info');
        }
        return сhannels.slice(0, numChannels[0]);
    }
    static getAnalogChannels(boardId, preset = brainflow_types_1.BrainFlowPresets.DEFAULT_PRESET) {
        const numChannels = [0];
        const сhannels = [...new Array(512).fill(0)];
        const res = BoardControllerDLL.getInstance().getAnalogChannels(boardId, preset, сhannels, numChannels);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not get board info');
        }
        return сhannels.slice(0, numChannels[0]);
    }
    static getGyroChannels(boardId, preset = brainflow_types_1.BrainFlowPresets.DEFAULT_PRESET) {
        const numChannels = [0];
        const сhannels = [...new Array(512).fill(0)];
        const res = BoardControllerDLL.getInstance().getGyroChannels(boardId, preset, сhannels, numChannels);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not get board info');
        }
        return сhannels.slice(0, numChannels[0]);
    }
    static getOtherChannels(boardId, preset = brainflow_types_1.BrainFlowPresets.DEFAULT_PRESET) {
        const numChannels = [0];
        const сhannels = [...new Array(512).fill(0)];
        const res = BoardControllerDLL.getInstance().getOtherChannels(boardId, preset, сhannels, numChannels);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not get board info');
        }
        return сhannels.slice(0, numChannels[0]);
    }
    static getTemperatureChannels(boardId, preset = brainflow_types_1.BrainFlowPresets.DEFAULT_PRESET) {
        const numChannels = [0];
        const сhannels = [...new Array(512).fill(0)];
        const res = BoardControllerDLL.getInstance().getTemperatureChannels(boardId, preset, сhannels, numChannels);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not get board info');
        }
        return сhannels.slice(0, numChannels[0]);
    }
    static getResistanceChannels(boardId, preset = brainflow_types_1.BrainFlowPresets.DEFAULT_PRESET) {
        const numChannels = [0];
        const сhannels = [...new Array(512).fill(0)];
        const res = BoardControllerDLL.getInstance().getResistanceChannels(boardId, preset, сhannels, numChannels);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not get board info');
        }
        return сhannels.slice(0, numChannels[0]);
    }
    static getMagnetometerChannels(boardId, preset = brainflow_types_1.BrainFlowPresets.DEFAULT_PRESET) {
        const numChannels = [0];
        const сhannels = [...new Array(512).fill(0)];
        const res = BoardControllerDLL.getInstance().getMagnetometerChannels(boardId, preset, сhannels, numChannels);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not get board info');
        }
        return сhannels.slice(0, numChannels[0]);
    }
    static getBoardPresets(boardId) {
        const len = [0];
        const presets = [...new Array(512).fill(0)];
        const res = BoardControllerDLL.getInstance().getBoardPresets(boardId, presets, len);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not get board info');
        }
        return presets.slice(0, len[0]);
    }
    static getDeviceName(boardId, preset = brainflow_types_1.BrainFlowPresets.DEFAULT_PRESET) {
        const len = [0];
        let out = ['\0'.repeat(512)];
        const res = BoardControllerDLL.getInstance().getDeviceName(boardId, preset, out, len);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not get device info');
        }
        return out[0].substring(0, len[0]);
    }
    static getEegNames(boardId, preset = brainflow_types_1.BrainFlowPresets.DEFAULT_PRESET) {
        const len = [0];
        let out = ['\0'.repeat(4096)];
        const res = BoardControllerDLL.getInstance().getEegNames(boardId, preset, out, len);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not get device info');
        }
        return out[0].substring(0, len[0]).split(",");
    }
    static getBoardDescr(boardId, preset = brainflow_types_1.BrainFlowPresets.DEFAULT_PRESET) {
        const len = [0];
        let out = ['\0'.repeat(4096)];
        const res = BoardControllerDLL.getInstance().getBoardDescr(boardId, preset, out, len);
        if (res !== brainflow_types_1.BrainFlowExitCodes.STATUS_OK) {
            throw new brainflow_types_1.BrainFlowError(res, 'Could not get device info');
        }
        return JSON.parse(out[0].substring(0, len[0]));
    }
}
exports.BoardShim = BoardShim;
//# sourceMappingURL=board_shim.js.map